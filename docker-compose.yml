services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=dl.DC_GPU_Val_Penang_Lab@amd.com
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
    ports:
      - "80:80" #HTTP
      - "443:443" #HTTPS
      - "8080:8080" #Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
  backend:
    container_name: backend
    build: ./backend
    ports:
      - "5000:5000"
    env_file:
      - ./backend/.env
    depends_on:
      - mongodb
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`dcgpu-lab.amd.com`) && PathPrefix(`/api/`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=5000"
      - "traefik.http.routers.backend.middlewares=strip-api"
      - "traefik.http.middlewares.strip-api.stripprefix.prefixes=/api"

  celery:
    container_name: celery
    build: ./celery
    command: celery -A celery_app worker -B --loglevel=INFO
    env_file:
      - ./celery/.env
    depends_on:
      - redis

  frontend:
    container_name: frontend
    build: ./frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`dcgpu-lab.amd.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=3005"
    env_file:
      - ./frontend/.env
    depends_on:
      - backend
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    env_file:
      - .env
    volumes:
      - mongo-data:/data/db
  redis:
    image: redis:8-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    env_file:
      - .env
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    volumes:
      - redis-data:/data
volumes:
  mongo-data:
  redis-data:
